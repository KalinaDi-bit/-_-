import re

# –†–µ–≥—É–ª—è—Ä–Ω—ñ –≤–∏—Ä–∞–∑–∏ –¥–ª—è —Ç–æ–∫–µ–Ω—ñ–≤
token_specification = [
    # üîë –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ —Å–ø–æ—á–∞—Ç–∫—É
    ('–§–£–ù–ö–¶–Ü–Ø',    r'\b—Ñ—É–Ω–∫—Ü—ñ—è\b'),
    ('–Ø–ö–©–û',       r'\b—è–∫—â–æ\b'),
    ('–Ü–ù–ê–ö–®–ï',     r'\–±—ñ–Ω–∞–∫—à–µ\b'),
    ('–ü–û–ö–ò',       r'\b–ø–æ–∫–∏\b'),
    ('–î–†–£–ö–£–í–ê–¢–ò',  r'\b–¥—Ä—É–∫—É–≤–∞—Ç–∏\b'),
    ('–ü–û–í–ï–†–ù–£–¢–ò',  r'\b–ø–æ–≤–µ—Ä–Ω—É—Ç–∏\b'),

    # üß† –ë—É–ª–µ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
    ('–¢–ê–ö',        r'\b—Ç–∞–∫\b'),
    ('–ù–Ü',         r'\b–Ω—ñ\b'),

    # üî¢ –õ–µ–∫—Å–µ–º–∏
    ('–ß–ò–°–õ–û',      r'\d+(\.\d+)?'),
    ('–†–Ø–î–û–ö',      r'"[^"\n]*"'),

    # üîÅ –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
    ('–†–Ü–í–ù–Ü–°–¢–¨',   r'=='),
    ('–ù–ï_–†–Ü–í–ù–Ü–°–¢–¨',r'!='),
    ('–ú–ï–ù–®–ï_–ê–ë–û_–î–û–†–Ü–í–ù–Æ–Ñ', r'<='),
    ('–ë–Ü–õ–¨–®–ï_–ê–ë–û_–î–û–†–Ü–í–ù–Æ–Ñ', r'>='),
    ('–ú–ï–ù–®–ï',      r'<'),
    ('–ë–Ü–õ–¨–®–ï',     r'>'),
    ('–†–Ü–í–ù–û',      r'='),

    # üîò –û–ø–µ—Ä–∞—Ç–æ—Ä–∏
    ('–ü–õ–Æ–°',       r'\+'),
    ('–ú–Ü–ù–£–°',      r'-'),
    ('–ü–†–û–ú–Ü–ù–ï–ù–ù–Ø', r'\*'),
    ('–¶–Ü–õ–û–î–Ü–õ–ï–ù–ù–Ø',r'//'),
    ('–î–Ü–õ–ï–ù–ù–Ø',    r'/'),
    ('–ó–ê–õ–ò–®–û–ö',    r'%'),

    # üéØ –õ–æ–≥—ñ–∫–∞
    ('–Ü',          r'\b—ñ\b'),
    ('–ê–ë–û',        r'\b–∞–±–æ\b'),
    ('–ù–ï',         r'\b–Ω–µ\b'),

    # üìë –°–∏–Ω—Ç–∞–∫—Å–∏—Å
    ('–î–í–û–ö–†–ê–ü–ö–ê',  r':'),
    ('–ö–û–ú–ê',       r','),
    ('–í–Ü–î–ö–†–ò–¢–ê_–î–£–ñ–ö–ê',  r'\('),
    ('–ó–ê–ö–†–ò–¢–ê_–î–£–ñ–ö–ê',   r'\)'),

    # üè∑Ô∏è –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∏ –ü–Ü–°–õ–Ø –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤
    ('–Ü–î–ï–ù–¢–ò–§–Ü–ö–ê–¢–û–†', r"[–ê-–Ø–∞-—è–á—ó–Ü—ñ–Ñ—î“ê“ë_ º][–ê-–Ø–∞-—è–á—ó–Ü—ñ–Ñ—î“ê“ë0-9_ º]*"),

    # üìé –ü—Ä–æ–±—ñ–ª–∏, –Ω–æ–≤—ñ —Ä—è–¥–∫–∏, –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ
    ('–ü–†–û–ë–Ü–õ',     r'[ \t]+'),
    ('–ù–û–í–ò–ô_–†–Ø–î–û–ö',r'\n'),
    ('–ö–û–ú–ï–ù–¢–ê–†',   r'#.*'),
]

# –ö–æ–º–ø—ñ–ª—å–æ–≤–∞–Ω–∏–π —Ä–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑
tok_regex = '|'.join(f'(?P<{name}>{pattern})' for name, pattern in token_specification)
compiled_regex = re.compile(tok_regex)

def –ª–µ–∫—Å–µ—Ä(–∫–æ–¥):
    pos = 0
    –ª = len(–∫–æ–¥)
    while pos < –ª:
        match = compiled_regex.match(–∫–æ–¥, pos)
        if not match:
            raise SyntaxError(f'–ù–µ–≤—ñ–¥–æ–º–∏–π —Å–∏–º–≤–æ–ª: {–∫–æ–¥[pos]}')
        —Ç–∏–ø_—Ç–æ–∫–µ–Ω–∞ = match.lastgroup
        –∑–Ω–∞—á–µ–Ω–Ω—è = match.group(—Ç–∏–ø_—Ç–æ–∫–µ–Ω–∞)
        pos = match.end()

        if —Ç–∏–ø_—Ç–æ–∫–µ–Ω–∞ in ('–ü–†–û–ë–Ü–õ', '–ö–û–ú–ï–ù–¢–ê–†', '–ù–û–í–ò–ô_–†–Ø–î–û–ö'):
            continue

        if —Ç–∏–ø_—Ç–æ–∫–µ–Ω–∞ == '–ß–ò–°–õ–û':
            if '.' in –∑–Ω–∞—á–µ–Ω–Ω—è:
                –∑–Ω–∞—á–µ–Ω–Ω—è = float(–∑–Ω–∞—á–µ–Ω–Ω—è)
            else:
                –∑–Ω–∞—á–µ–Ω–Ω—è = int(–∑–Ω–∞—á–µ–Ω–Ω—è)

        if —Ç–∏–ø_—Ç–æ–∫–µ–Ω–∞ == '–†–Ø–î–û–ö':
            –∑–Ω–∞—á–µ–Ω–Ω—è = –∑–Ω–∞—á–µ–Ω–Ω—è[1:-1]  # –ó—Ä—ñ–∑–∞—Ç–∏ –ª–∞–ø–∫–∏

        # –î–æ–¥–∞–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è —Å–ª–æ–≤–∞ "—ñ–Ω–∞–∫—à–µ"
        if —Ç–∏–ø_—Ç–æ–∫–µ–Ω–∞ == '–Ü–î–ï–ù–¢–ò–§–Ü–ö–ê–¢–û–†':
            if –∑–Ω–∞—á–µ–Ω–Ω—è.lower() == "—ñ–Ω–∞–∫—à–µ":
                —Ç–∏–ø_—Ç–æ–∫–µ–Ω–∞ = "–Ü–ù–ê–ö–®–ï"

        print(f"==> —Ç–æ–∫–µ–Ω: {—Ç–∏–ø_—Ç–æ–∫–µ–Ω–∞}, –∑–Ω–∞—á–µ–Ω–Ω—è: {–∑–Ω–∞—á–µ–Ω–Ω—è}")
        yield (—Ç–∏–ø_—Ç–æ–∫–µ–Ω–∞, –∑–Ω–∞—á–µ–Ω–Ω—è)
