from структури import Функція, ВикликФункції, Повернути, Друк, Якщо, Присвоєння, Поки,УнарнаОперація

class Парсер:
    def __init__(self, токени):
        self.токени = токени
        self.поточний = 0

    def поточний_токен(self):
        if self.поточний < len(self.токени):
            return self.токени[self.поточний]
        return ('КІНЕЦЬ', '')

    def зазирнути(self, крок=1):
        індекс = self.поточний + крок
        if індекс < len(self.токени):
            return self.токени[індекс]
        return ('КІНЕЦЬ', '')

    def зʼїсти(self, тип_очікуваний):
        токен = self.поточний_токен()
        if токен and токен[0] == тип_очікуваний:
            self.поточний += 1
            return токен[1]
        raise SyntaxError(f"Очікував {тип_очікуваний}, отримав {токен}")

    def розпарсити_функцію(self):
        self.зʼїсти('ФУНКЦІЯ')
        імʼя = self.зʼїсти('ІДЕНТИФІКАТОР')
        self.зʼїсти('ВІДКРИТА_ДУЖКА')
        параметри = self.розпарсити_параметри()
        self.зʼїсти('ЗАКРИТА_ДУЖКА')
        self.зʼїсти('ДВОКРАПКА')
        тіло = self.розпарсити_тіло()
        return Функція(імʼя, параметри, тіло)

    def розпарсити_параметри(self):
        параметри = []
        токен = self.поточний_токен()
        while токен and токен[0] == 'ІДЕНТИФІКАТОР':
            параметри.append(self.зʼїсти('ІДЕНТИФІКАТОР'))
            токен = self.поточний_токен()
            if токен and токен[0] == 'КОМА':
                self.зʼїсти('КОМА')
                токен = self.поточний_токен()
            else:
                break
        return параметри

    def розпарсити_тіло(self, stop_токени=None):
        if stop_токени is None:
            stop_токени = ['ФУНКЦІЯ', 'ІНАКШЕ', 'КІНЕЦЬ']
        тіло = []
        while self.поточний < len(self.токени):
            токен = self.поточний_токен()
            print(f"розпарсити_тіло: токен -> {токен}")
            if токен[0] in stop_токени:
                print(f"-> зупинка на токені {токен}")
                break
            команда = self.розпарсити_команду()
            if команда is not None:
                тіло.append(команда)
        return тіло

    def розпарсити_команду(self):
        токен = self.поточний_токен()
        print(f"розпарсити_команду: поточний токен -> {токен}")

        if токен[0] in ['ІНАКШЕ', 'КІНЕЦЬ']:
            # Не розпарсуємо ці ключові слова тут — це сигнал вийти на рівень вище
            return None

        if токен[0] == 'ЯКЩО':
            print("-> Це ЯКЩО")
            return self.розпарсити_якщо()

        elif токен[0] == 'ПОКИ':
            print("-> Це ПОКИ")
            return self.розпарсити_поки()

        elif токен[0] == 'ПОВЕРНУТИ':
            print("-> Це ПОВЕРНУТИ")
            self.зʼїсти('ПОВЕРНУТИ')
            значення = self.розпарсити_вираз()
            return Повернути(значення)

        elif токен[0] == 'ДРУКУВАТИ':
            print("-> Це ДРУКУВАТИ")
            self.зʼїсти('ДРУКУВАТИ')
            self.зʼїсти('ВІДКРИТА_ДУЖКА')
            аргументи = []
            while self.поточний_токен()[0] != 'ЗАКРИТА_ДУЖКА':
                аргументи.append(self.розпарсити_вираз())
                if self.поточний_токен()[0] == 'КОМА':
                    self.зʼїсти('КОМА')
            self.зʼїсти('ЗАКРИТА_ДУЖКА')
            return Друк(аргументи)

        elif токен[0] == 'ІДЕНТИФІКАТОР':
            імʼя = self.зʼїсти('ІДЕНТИФІКАТОР')
            наступний = self.поточний_токен()
            print(f"-> ІДЕНТИФІКАТОР '{імʼя}', наступний токен: {наступний}")

            if наступний[0] == 'РІВНО':
                print("-> Присвоєння")
                self.зʼїсти('РІВНО')
                значення = self.розпарсити_вираз()
                return Присвоєння(імʼя, значення)

            elif наступний[0] == 'ВІДКРИТА_ДУЖКА':
                print("-> Виклик функції")
                self.зʼїсти('ВІДКРИТА_ДУЖКА')
                аргументи = []
                while self.поточний_токен()[0] != 'ЗАКРИТА_ДУЖКА':
                    аргументи.append(self.розпарсити_вираз())
                    if self.поточний_токен()[0] == 'КОМА':
                        self.зʼїсти('КОМА')
                self.зʼїсти('ЗАКРИТА_ДУЖКА')
                return ВикликФункції(імʼя, аргументи)

            else:
                raise SyntaxError(f"Очікував '=' або '(', отримав {наступний}")

        else:
            raise SyntaxError(f"Невідома команда: {токен}")


    def розпарсити_якщо(self, як_інакше=False):
        print("розпарсити_якщо: початок")
        self.зʼїсти('ЯКЩО')
        умова = self.розпарсити_вираз()
        print(f"-> Умова: {умова}")
        self.зʼїсти('ДВОКРАПКА')
        тіло_якщо = self.розпарсити_тіло(stop_токени=['ІНАКШЕ', 'КІНЕЦЬ'])

        тіло_інакше = None
        if self.поточний_токен()[0] == 'ІНАКШЕ':
            print("-> Є гілка ІНАКШЕ")
            self.зʼїсти('ІНАКШЕ')
            if self.поточний_токен()[0] == 'ЯКЩО':
                print("-> ІНАКШЕ ЯКЩО")
                тіло_інакше = [self.розпарсити_якщо(як_інакше=True)]
            else:
                self.зʼїсти('ДВОКРАПКА')
                тіло_інакше = self.розпарсити_тіло(stop_токени=['КІНЕЦЬ'])

        return Якщо(умова, тіло_якщо, тіло_інакше)

    def розпарсити_поки(self):
        self.зʼїсти('ПОКИ')
        умова = self.розпарсити_вираз()
        self.зʼїсти('ДВОКРАПКА')
        тіло = self.розпарсити_тіло()
        return Поки(умова, тіло)

    def розпарсити_виклик_функції(self):
        імʼя = self.зʼїсти('ІДЕНТИФІКАТОР')
        self.зʼїсти('ВІДКРИТА_ДУЖКА')
        аргументи = []
        while self.поточний_токен()[0] != 'ЗАКРИТА_ДУЖКА':
            аргументи.append(self.розпарсити_вираз())
            if self.поточний_токен()[0] == 'КОМА':
                self.зʼїсти('КОМА')
        self.зʼїсти('ЗАКРИТА_ДУЖКА')
        return ВикликФункції(імʼя, аргументи)

    # ВИРАЗИ
    def розпарсити_вираз(self):
        return self.розпарсити_або()

    def розпарсити_або(self):
        лівий = self.розпарсити_і()
        while self.поточний_токен()[0] == 'АБО':
            self.зʼїсти('АБО')
            правий = self.розпарсити_і()
            лівий = ('ВИРАЗ', лівий, 'АБО', правий)
        return лівий

    def розпарсити_і(self):
        лівий = self.розпарсити_не()
        while self.поточний_токен()[0] == 'І':
            self.зʼїсти('І')
            правий = self.розпарсити_не()
            лівий = ('ВИРАЗ', лівий, 'І', правий)
        return лівий

    def розпарсити_не(self):
        if self.перевірити('НЕ'):
            self.зʼїсти('НЕ')
            операнд = self.розпарсити_не()
            return УнарнаОперація('НЕ', операнд)
        elif self.перевірити('МІНУС'):
            self.зʼїсти('МІНУС')
            операнд = self.розпарсити_не()
            return УнарнаОперація('МІНУС', операнд)
        else:
            return self.розпарсити_порівняння()

    def перевірити(self, тип):
        токен = self.поточний_токен()
        return токен[0] == тип

    def розпарсити_порівняння(self):
        лівий = self.розпарсити_арифметичний_вираз()
        токен = self.поточний_токен()
        if токен[0] in ['РІВНІСТЬ', 'НЕ_РІВНІСТЬ', 'МЕНШЕ', 'БІЛЬШЕ', 'МЕНШЕ_АБО_ДОРІВНЮЄ', 'БІЛЬШЕ_АБО_ДОРІВНЮЄ']:
            оператор = токен[0]
            self.поточний += 1
            правий = self.розпарсити_арифметичний_вираз()
            return ('ВИРАЗ', лівий, оператор, правий)
        return лівий

    def розпарсити_арифметичний_вираз(self):
        лівий = self.розпарсити_первинний_вираз()
        токен = self.поточний_токен()
        while токен[0] in ['ПЛЮС', 'МІНУС', 'ПРОМІНЕННЯ', 'ДІЛЕННЯ', 'ЦІЛОДІЛЕННЯ', 'ЗАЛИШОК']:
            оператор = токен[0]
            self.поточний += 1
            правий = self.розпарсити_первинний_вираз()
            лівий = ('ВИРАЗ', лівий, оператор, правий)
            токен = self.поточний_токен()
        return лівий

    def розпарсити_первинний_вираз(self):
        токен = self.поточний_токен()

        if токен[0] in ('ЧИСЛО', 'РЯДОК'):
            self.поточний += 1
            return (токен[0], токен[1])
        elif токен[0] == 'ТАК':
            self.поточний += 1
            return ('БУЛЕВЕ', True)
        elif токен[0] == 'НІ':
            self.поточний += 1
            return ('БУЛЕВЕ', False)
        elif токен[0] == 'ІДЕНТИФІКАТОР':
            if self.зазирнути()[0] == 'ВІДКРИТА_ДУЖКА':
                return self.розпарсити_виклик_функції()
            else:
                self.поточний += 1
                return (токен[0], токен[1])
        elif токен[0] == 'ВІДКРИТА_ДУЖКА':
            self.зʼїсти('ВІДКРИТА_ДУЖКА')
            вираз = self.розпарсити_вираз()
            self.зʼїсти('ЗАКРИТА_ДУЖКА')
            return вираз
        else:
            raise SyntaxError(f"Очікував значення, отримав {токен}")
